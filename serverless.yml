service: gettogether

plugins:
  - serverless-pseudo-parameters
  - serverless-iam-roles-per-function

custom:
  defaultRegion: eu-west-1
  defaultStage: dev${env:SLSUSER, ""}
  getTogethersTableName: ${self:provider.stage}-gettogethers
  joinGetTogetherSnsTopicName: ${self:provider.stage}-joingettogethers
  joinGetTogetherSnsTopic: arn:aws:sns:#{AWS::Region}:#{AWS::AccountId}:${self:custom.joinGetTogetherSnsTopicName}

provider:
  name: aws
  runtime: nodejs10.x
  region: ${opt:region, self:custom.defaultRegion}
  stage: ${opt:region, self:custom.defaultStage}


functions:
  notifyOrganiser:
    handler: src/functions/notifyOrganiser.handler
    events:
      - sns: ${self:custom.joinGetTogetherSnsTopicName}
  gettogether:
    handler: src/functions/getGetTogethers.handler
    events: 
      - http:
          path: api/get-together
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:scan
        Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.getTogethersTableName}
    environment: 
      getTogethersTableName: ${self:custom.getTogethersTableName}

  joinGetTogether:
    handler: src/functions/joinGetTogether.handler
    events:
      - http:
          path: api/getTogether
          method: post
    environment:
     joinGetTogetherSnsTopic: ${self:custom.joinGetTogetherSnsTopic}
    iamRoleStatements:
      - Effect: Allow
        Action: sns:Publish
        Resource: ${self:custom.joinGetTogetherSnsTopic}

resources:
  Resources:
    GetTogethersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName:  ${self:custom.getTogethersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
